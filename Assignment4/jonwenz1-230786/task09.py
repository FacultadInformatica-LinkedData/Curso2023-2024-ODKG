# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MLuGsRVgMaLK6RJaU2tqp-QQzG8d39L3

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

from rdflib.namespace import RDF
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns1 = Namespace("http://data.three.org#")
ns2 = Namespace("http://data.four.org#")
OWL = Namespace("http://www.w3.org/2002/07/owl#")

def extract_given_and_family_names(g, subject):
    given_matches = list(g.triples((subject, VCARD.Given, None)))
    given = given_matches[0][2] if len(given_matches) > 0 else None
    family_matches = list(g.triples((subject, VCARD.Family, None)))
    family = family_matches[0][2] if len(family_matches) > 0 else None
    return given, family


for s3, _, _ in g1.triples((None, RDF.type, ns1.Person)):
    given1, family1 = extract_given_and_family_names(g1, s3)

    for s4, _, _ in g2.triples((None, RDF.type, ns2.Person)):
            given2, family2 = extract_given_and_family_names(g2, s4)

            if given1 == given2 and family1 == family2:
                g3.add((s3, OWL.sameAs, s4))

print("Graph 3:")
print(g3.serialize(format="ttl"))