# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZVYFz0i9vzdmhZ14L-llpH3Wp0gtqrQ3

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery('''
    SELECT ?subClass
    WHERE {
        ?subClass rdfs:subClassOf* ns:LivingThing .
    }
''',
initNs={"rdfs": RDFS, "ns": Namespace("http://somewhere#")})
# Visualize the results

for r in g.query(q1):
    print(r.subClass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
    SELECT ?individual
    WHERE {
        ?individual rdf:type/rdfs:subClassOf* ns:Person .
    }
''',
initNs={"rdf": RDF, "rdfs": RDFS, "ns": Namespace("http://somewhere#")})
# Visualize the results
for r in g.query(q2):
    print(r.individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q3 = prepareQuery('''
    SELECT ?individual ?property ?value ?class_name
    WHERE {
        ?individual rdf:type ?class_name .
        ?individual ?property ?value .
        FILTER (?class_name = ns:Person || ?class_name = ns:Animal)
    }
''',
initNs={"rdf": RDF, "ns": Namespace("http://somewhere#")})
# Visualize the results
for row in g.query(q3):
    print("Individual:", row.individual)
    print("Property:", row.property)
    print("Value:", row.value)
    print("Class:", row.class_name)
    print("\n-----------------------------\n")

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
from rdflib import FOAF
from rdflib import XSD
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q4 = prepareQuery('''
    SELECT ?person
    WHERE {
        ?person foaf:knows ?RockySmith.
        ?RockySmith vcard:FN ?RockySmithFullName.
    }
''',
initNs={"foaf": FOAF,"vcard": VCARD, "xsd":XSD}
)
# Visualize the results
for r in g.query(q4,initBindings = {'?RockySmithFullName' : Literal('Rocky Smith', datatype=XSD.string)}):
  print(r.person)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

q5 = prepareQuery('''
    SELECT ?person
    WHERE {
        ?person foaf:knows ?someone .
        ?person foaf:knows ?someone2 .
        FILTER (?someone != ?someone2)
    }
    GROUP BY ?person
''',
initNs={"foaf": FOAF}
)

# Visualize the results
for r in g.query(q5):
  print(r.person)