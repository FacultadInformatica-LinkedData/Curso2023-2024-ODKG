# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZVYFz0i9vzdmhZ14L-llpH3Wp0gtqrQ3

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# With RDFLib
ns = Namespace("http://somewhere#")

def print_subclasses_recursively(klass):
    print(klass)
    for subclass, _, _ in g.triples((None, RDFS.subClassOf, klass)):
        print_subclasses_recursively(subclass)

print("RDFLib query for subclasses of LivingThing:")
print_subclasses_recursively(ns.LivingThing)

# With SPARQL
from rdflib.plugins.sparql import prepareQuery
query1 = prepareQuery("""
    SELECT ?subclass
    WHERE
    {
    ?subclass rdfs:subClassOf* ns:LivingThing .
    }
""", initNs={"rdfs": RDFS, "ns": ns})

print("\nSPARQL query for subclasses of LivingThing:")
for r in g.query(query1):
    print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# With RDFLib
print("RDFLib query for all individuals of Person:")
def print_all_subclass_individuals_recursively(klass):
    for individual, _, _ in g.triples((None, RDF.type, klass)):
        print(individual)

    for subclass, _, _ in g.triples((None, RDFS.subClassOf, klass)):
        print_all_subclass_individuals_recursively(subclass)

print_all_subclass_individuals_recursively(ns.Person)

# With SPARQL
query2 = prepareQuery("""
    SELECT ?individual
    WHERE
    {
    ?subclass rdfs:subClassOf* ns:Person .
    ?individual rdf:type ?subclass .
    }
""", initNs={"rdfs": RDFS, "ns": ns})

print("\nSPARQL query for subclasses of LivingThing:")
for r in g.query(query2):
    print(r.individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# With RDFLib
def print_all_properties(klass):
    for individual, _, _ in g.triples((None, RDF.type, klass)):
        for _, property, _ in g.triples((individual, None, None)):
            print(f"Individual: {individual}, Property: {property}")

print("RDFLib query for all individuals of Person or Animal and all their properties")
print_all_properties(ns.Person)
print_all_properties(ns.Animal)

# With SPARQL
query3 = prepareQuery("""
    SELECT ?individual ?property
    WHERE
    {
    ?individual ?property []
    {
    ?individual a ns:Person .
    } UNION {
    ?individual a ns:Animal .
    }
    }
""", initNs={"ns": ns})

print("\nSPARQL query for all individuals of Person or Animal and all their properties")
for r in g.query(query3):
    print(f"Individual: {r.individual}, Property: {r.property}")

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

from rdflib import FOAF
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
query4 = prepareQuery("""
    SELECT ?name
    WHERE
    {
    ?subclass rdfs:subClassOf* ns:Person .
    ?person rdf:type ?subclass .
    ?person vcard:FN ?name .
    ?person foaf:knows ns:RockySmith .
    }
""", initNs={"foaf": FOAF, "ns": ns, "vcard": VCARD, "rdfs": RDFS})

print("Names of the people who know Rocky:")
for r in g.query(query4):
    print(r.name)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

query5 = prepareQuery("""
    SELECT DISTINCT ?entity
    WHERE
    {
    ?entity foaf:knows ?known1 .
    ?entity foaf:knows ?known2 .
    FILTER(?known1 != ?known2) .
    }
""")

print("Entities who know at least two other entities in the graph:")
for r in g.query(query5):
    print(r.entity)