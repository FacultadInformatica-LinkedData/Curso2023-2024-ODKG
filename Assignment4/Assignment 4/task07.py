# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jG6rBYzVn04GfW0pV9cjpgUy0AFydXYE

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

# RDFLib

print("RDFlib results:")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)


#SPARQL

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "rdfs": RDFS,"ns": ns}
)

print("SPARQL results:")
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

#RDFlib

print("RDFlib results:")
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s1)):
    print(s2)

#SPARQL

q2 = prepareQuery('''
  SELECT ?Individual WHERE {
    ?Subject rdfs:subClassOf* ns:Person.
    ?Individual rdf:type ?Subject
  }
  ''',
  initNs = { "rdfs": RDFS,"ns": ns,"rdf": RDF}
)

print("SPARQL results: ")
for ns in g.query(q2):
  print(ns.Individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

#RDFLib

print("RDFLib results (Animal): ")
for s,p,o in g.triples((None,RDF.type,ns.Animal)) :
  for s2,p2,o2 in g.triples((s,None,None)):
      print(s2,p2,o2)

print("RDFLib results (Person): ")
for s,p,o in g.triples((None,RDF.type,ns.Person)) :
  for s2,p2,o2 in g.triples((s,None,None)):
      print(s2,p2,o2)

#SPARQL

print("SPARQL results (Animal): ")
q3 = prepareQuery('''
  SELECT ?Subject ?p ?o WHERE {
    ?Subject rdf:type ns:Animal.
    ?Subject ?p ?o
  }
  ''',
  initNs = { "rdfs": RDFS,"ns": ns,"rdf": RDF}
)
for ns in g.query(q3):
  print(ns.Subject,ns.p,ns.o)


print("SPARQL results (Person): ")
q7 = prepareQuery('''
  SELECT ?Subject ?p ?o WHERE {
    ?Subject rdf:type ns:Person.
    ?Subject ?p ?o
  }
  ''',
  initNs = { "rdfs": RDFS,"ns": ns,"rdf": RDF}
)
for ns in g.query(q7):
  print(ns.Subject,ns.p,ns.o)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")

#RDFLib
print("RDFLib results: ")
for s,p,o in g.triples((None,RDF.type,ns.Person)) :
  for s2,p2,o2 in g.triples((s,FOAF.knows,ns.RockySmith)):
      print(s2)

#SPARQL

print("SPARQL results: ")
q4 = prepareQuery('''
  SELECT ?Subject ?p ?o WHERE {
    ?Subject rdf:type ns:Person.
    ?Subject foaf:knows ns:RockySmith
  }
  ''',
  initNs = { "foaf": FOAF,"ns": ns,"rdf": RDF}
)
for ns in g.query(q4):
  print(ns.Subject)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")

#RDFLib

print("RDFLib results: ")

entity_counts = {}
for s, p, o in g.triples((None, FOAF.knows, None)):
    if s in entity_counts:
        entity_counts[s] += 1
    else:
        entity_counts[s] = 1

for entity, count in entity_counts.items():
    if count >= 2:
        print(f"Entity {entity} knows at least {count} other entities")

#SPARQL

print("SPARQL results: ")

q5 = prepareQuery('''
    SELECT ?Subject WHERE {
        ?Subject foaf:knows ?knows1, ?knows2.
        FILTER (?knows1 != ?knows2)
    }
''',
  initNs = { "foaf": FOAF}
)

entities = set()

for row in g.query(q5):
  entities.add(row.Subject)

for entity in entities:
  print(f"Entity {entity} knows at least 2 other entities")