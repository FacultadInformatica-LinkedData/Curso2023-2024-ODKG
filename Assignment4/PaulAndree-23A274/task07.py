# -*- coding: utf-8 -*-
"""Copy of Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17d60hQ8MOvfxVXAloRH8QwTCvZCgZ9lH

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, XSD, FOAF
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""


from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?subclasses WHERE {
    ?subclasses RDFS:subClassOf ns:LivingThing.
  }
  ''',initNs = { "ns":ns, "RDFS":RDFS }
)


for r in g.query(q1):
  print(r.subclasses)



#RDLIB
print("_______RDLIB__________")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = prepareQuery("""
  SELECT ?individuals WHERE{
    ?subclass RDFS:subClassOf* ns:Person.
    ?individuals a ?subclass.
  }
  """, initNs = { "ns":ns, "RDFS":RDFS  }
)
# Visualize the results
for r in g.query(q2):
  print(r.individuals)


#RDFlib
print("_______RDLIB__________")
for individual, property, value in g.triples((None, RDF.type, ns.Person)):
  print(individual)

for subclass, prop, val in g.triples((None, RDFS.subClassOf, ns.Person)):
  for individual, property, value in g.triples((None, RDF.type, subclass)):
    print(individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

q3 = prepareQuery("""
SELECT  ?individual ?property WHERE {
{
  ?individual a ns:Person.
  ?individual ?property ?value
}
  UNION
{
    ?individual a ?Animal.
    ?individual ?property ?value
}
}
  """, initNs = { "ns":ns, "RDFS":RDFS  }
)



# Visualize the results
for r in g.query(q3):
  print(r.individual, r.property)

#RDLIB
print("_______RDLIB__________")

def personIndividualsProperties(Class):
  for individual, property, value in g.triples((None, RDF.type, Class)):
    for s, p, o in g.triples((individual, None, None)):
        print(individual, property)
        print(s, p)
  for s, p, o in g.triples((None, None, Class)):
        print(o, p)
personIndividualsProperties(ns.Person)
personIndividualsProperties(ns.Animal)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q4 = prepareQuery("""
SELECT ?nameX WHERE{
    ?X FOAF:knows ns:RockySmith;
           VCARD:Given ?nameX.
}

  """, initNs = { "ns":ns, "RDFS":RDFS, "FOAF":FOAF, "VCARD":VCARD  }
)


# Visualize the results
for r in g.query(q4):
  print(r.nameX)
# Visualize the results RDLIB
print("_______RDLIB__________")
for a,p,o in g.triples((None, FOAF.knows, ns.RockySmith)):
  givenName = g.value(subject=a, predicate=VCARD.Given, object=None)
  print(givenName)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""


VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q5 = prepareQuery("""
SELECT ?X WHERE{
    ?X FOAF:knows ?y
} GROUP BY ?X
HAVING (count(distinct *) >= 2)

  """, initNs = { "ns":ns, "RDFS":RDFS, "FOAF":FOAF, "VCARD":VCARD  }
)



# Visualize the results
for r in g.query(q5):
  print(r.X )
# Visualize the results RDLIB
print("_______RDLIB__________")
for s,p,o in g.triples((None, FOAF.knows, None)):
  counter=0
  for a,b,c in g.triples((s, FOAF.knows, None)):
    counter += 1
  if counter >= 2:
    print(g.value(subject=s, predicate=VCARD.Given, object=None))



