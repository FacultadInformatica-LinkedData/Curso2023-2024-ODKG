# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cx8b8EmGyQ3HHMVLZ6DBwiRQsU_Tf0l5

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery(
    """
    SELECT ?subclass
    WHERE {
        ?subclass rdfs:subClassOf ns:LivingThing.
    }
    """,
    initNs={"ns": Namespace("http://somewhere#"), "rdfs": RDFS}
)

# Visualize the results
print("Subclasses of LivingThing:")
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery(
    """
    SELECT ?individual
    WHERE {
        ?individual rdf:type/rdfs:subClassOf* ns:Person.
    }
    """,
    initNs={"ns": Namespace("http://somewhere#"), "rdf": RDF, "rdfs": RDFS}
)

# Visualize the results
print("Subclasses of LivingThing:")
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q3 = prepareQuery(
    """
    SELECT ?individual ?class ?property
    WHERE {
        ?individual rdf:type ?class .
        FILTER (?class = ns:Person || ?class = ns:Animal)
        ?individual ?property ?value .
    }
    """
    , initNs={'ns': Namespace("http://somewhere#")})

individuals = []
properties = []

# Visualize the results
for r in g.query(q3):
    individuals.append(r.individual)
    properties.append(r.property)

print("Individuals \n")
for i in individuals:
  print(i)

print("\n Properties \n")
for p in properties:
  print(p)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
ns = Namespace("http://somewhere#")
foaf = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
q4 = prepareQuery(
    """
    SELECT ?fullName
    WHERE {
        ?person foaf:knows ns:RockySmith .
        ?person rdf:type ns:Person .
        ?person vcard:FN ?fullName
    }
    """,
        initNs={'ns': ns, 'foaf': foaf, 'vcard' : vcard }
)

# Visualize the results
for r in g.query(q4):
    fullName = r.fullName
    print(f"Name of the person who knows Rocky Smith: {fullName}")

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

#TODO

q5 = prepareQuery(
    """
    SELECT ?entity
    WHERE {
        ?entity foaf:knows ?knows1 .
        ?entity foaf:knows ?knows2 .
        FILTER(?knows1 != ?knows2)
    }
    GROUP BY ?entity
    HAVING (COUNT(?knows1) >= 2)
    """,
    initNs={'foaf': foaf}
)

# Visualize the results

print("Entities who know at least two other entities in the graph:")
for r in g.query(q5):
    entity = r.entity
    print(entity)