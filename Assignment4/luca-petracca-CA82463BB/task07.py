# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJF1fax_QiNvaqvrrH4_zo4PdTEe2zYn

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")

subclasses = []
def list_subclasses(target):
    for s,p,o in g.triples((None, RDFS.subClassOf, target)):
        subclasses.append(s)
        list_subclasses(s)

list_subclasses(ns.LivingThing)
for s in subclasses:
    print(s)

# TO DO
# SPARQL query
q1 = """
PREFIX ns: <http://somewhere#>
SELECT ?subclass
WHERE {
    ?subclass rdfs:subClassOf/rdfs:subClassOf* ns:LivingThing .
}
"""

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

for s,p,o in g.triples((None, RDF.type, ns.Person)):
    print(s)
# We also need to consider the subclasses of Person.
for subclass in g.triples((None, RDFS.subClassOf, ns.Person)):
    for individual in g.triples((None, RDF.type, subclass[0])):
        print(individual[0])

# TO DO
q2 = """
PREFIX ns: <http://somewhere#>
SELECT ?individual
WHERE {
    {
        ?individual rdf:type ns:Person .
    } UNION {
        ?subclass rdfs:subClassOf ns:Person .
        ?individual rdf:type ?subclass .
    }
}
"""

for r in g.query(q2):
    print(r)
# Visualize the results

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

properties = []
def list_prop(target):
    for s,p,o in g.triples((None, RDF.type, target)):
        p = [p for s,p,o in g.triples((s, None, None))]
        properties.append((s,target, p))
list_prop(ns.Person)
list_prop(ns.Animal)

for i in properties:
    print(i)

# TO DO
q3 = """
PREFIX ns: <http://somewhere#>
SELECT ?individual ?property ?value
WHERE {
    {
        ?individual rdf:type ns:Person .
        ?individual ?property ?value .
    } UNION {
        ?individual rdf:type ns:Animal .
        ?individual ?property ?value .
    }
}
"""

for r in g.query(q3):
    print(r)
# Visualize the results

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

from rdflib.namespace import FOAF
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

persons = []
def list_persons(target):
    for s,p,o in g.triples((None, RDF.type, target)):
        persons.append(s)
    for s,p,o in g.triples((None, RDFS.subClassOf, target)):
        list_persons(s)
list_persons(ns.Person)

knowers = []
for count in persons:
    for s, p, o in g.triples((count, FOAF.knows, ns.RockySmith)):
        knowers.append(count)
for k in knowers:
    for s, p, o in g.triples((k, vcard.FN, None)):
        knowers[knowers.index(k)] = o

for k in knowers:
    print(k)

q4 = """
PREFIX ns: <http://somewhere#>
SELECT ?person
    WHERE {
        ?p rdf:type/rdfs:subClassOf* ns:Person.
        ?p foaf:knows ns:RockySmith.
        ?p vcard:FN ?person
    }
"""

for r in g.query(q4):
    print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

from rdflib.namespace import FOAF
knowers = {}
for s,p,o in g.triples((None, FOAF.knows, None)):
    if s in knowers:
        knowers[s] += 1
    else:
        knowers[s] = 1

entities = []
for entity, count in knowers.items():
    if count >= 2:
        entities.append(entity)

for entity in entities:
    print(entity)

# TO DO
q5 = """
PREFIX ns: <http://somewhere#>
SELECT ?entity
WHERE {
    ?entity foaf:knows ?known1 .
    ?entity foaf:knows ?known2 .
    FILTER(?known1 != ?known2)
}
GROUP BY ?entity
HAVING (COUNT(?entity) >= 2)
"""

for r in g.query(q5):
    print(r)

# Visualize the results