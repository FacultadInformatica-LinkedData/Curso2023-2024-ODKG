# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tSz1h9f0MwWPg-non2AFwXrhp2SU1RQu

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

from rdflib.plugins.sparql import prepareQuery
from rdflib import FOAF, XSD

g = Graph()

g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO

# Define the query
q1 = prepareQuery("""
    SELECT ?subClass
    WHERE {
        ?subClass rdfs:subClassOf* ns:LivingThing .
    }
""",

# Define namespaces
initNs={"rdf": RDF, "rdfs": RDFS, "ns": Namespace("http://somewhere#")})

# Execute the query and visualize the results
for r in g.query(q1):
  print(r.subClass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

# Define the query
q2 = prepareQuery('''
    SELECT ?individuals
    WHERE {
        ?individuals rdf:type/rdfs:subClassOf* ns:Person .
    }
''',

# Define namespaces
initNs={"rdf": RDF, "rdfs": RDFS, "ns": Namespace("http://somewhere#")})

# Execute the query and visualize the results
for r in g.query(q2):
  print(r.individuals)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO

# Define the query
q3 = prepareQuery('''
    SELECT ?individuals ?property ?value ?className
    WHERE {
        ?individuals rdf:type ?className .
        ?individuals ?property ?value .
        FILTER (?className = ns:Person || ?className = ns:Animal) .
    }
''',

# Define namespaces
initNs={"rdf": RDF, "rdfs": RDFS, "ns": Namespace("http://somewhere#")})

# Execute the query
results = g.query(q3)

# Iterate through visualize and the results
for r in results:
    print("Individual:", r.individuals)
    print("Property:", r.property)
    print("Value:", r.value)
    print("ClassName:", r.className, "\n\n")

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO

# Define the query
q4 = prepareQuery("""
    SELECT ?personName
    WHERE {
        ?personName foaf:knows ?Rocky .
        ?Rocky vcard:FN ?RockySmithFN .
    }
""",

# Define namespaces
initNs={"foaf": FOAF,"vcard": VCARD, "xsd":XSD})

# Visualize the results
for r in g.query(q4, initBindings = {'?RockySmithFN' : Literal('Rocky Smith', datatype = XSD.string)}):
  print(r.personName)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO

# Define the query
q5 = prepareQuery('''
    SELECT ?entity
    WHERE {
        ?entity foaf:knows ?otherEntity1 .
        ?entity foaf:knows ?otherEntity2 .
        FILTER (?otherEntity1 != ?otherEntity2)
    }
    GROUP BY ?entity
''',

# Define namespaces
initNs={"foaf": FOAF})

# Execute the query and visualize the results
for r in g.query(q5):
  print(r.entity)