# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XhT89sK3gvhV8mWvGekshm9h9D6Nk7fF

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

# Define the SPARQL query
query_str = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?subClass
WHERE {
  ?subClass rdfs:subClassOf <http://somewhere#LivingThing>.
}
"""
q1 = prepareQuery(query_str)
# Visualize the results

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

query_str = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?individual
WHERE {
  ?individual a/rdfs:subClassOf* <http://somewhere#Person>.
}
"""
q2 = prepareQuery(query_str)
# Visualize the results

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

query_str = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?individual ?property ?value ?class
WHERE {
  ?individual a ?class.
  ?individual ?property ?value.
  FILTER (?class = <http://somewhere#Person> || ?class = <http://somewhere#Animal>)
}
"""
q3 = prepareQuery(query_str)

# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

query_str = """
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?name
WHERE {
  ?person <http://www.w3.org/2001/vcard-rdf/3.0/FN> ?name.
  ?person <http://xmlns.com/foaf/0.1/knows> <http://somewhere#RockySmith>.
}
"""
q4 = prepareQuery(query_str)

# Visualize the results
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

query_str = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?entity
WHERE {
  ?entity foaf:knows ?otherEntity.
}
GROUP BY ?entity
HAVING (COUNT(?otherEntity) >= 2)
"""

# Prepare the SPARQL query
q5 = prepareQuery(query_str, initNs={'foaf': Namespace("http://xmlns.com/foaf/0.1/")})

# Visualize the results
for r in g.query(q5):
  print(r)
