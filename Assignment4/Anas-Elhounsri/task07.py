# -*- coding: utf-8 -*-
"""Task07.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF
**Task 07: Querying RDF(s)**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""
ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

q1= prepareQuery(
    """
    SELECT ?subClass
    WHERE {
        ?subClass rdfs:subClassOf* ns:LivingThing.
    }
    """,
    initNs={"rdfs": RDFS, "ns": ns}
)
# TO DO
# Visualize the results
r1 = g.query(q1)
for r in r1:
 print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**
"""
q2 = prepareQuery(
    """
    SELECT ?person
    WHERE {
        ?person a/rdfs:subClassOf* ns:Person.
    }
    """,
    initNs={"a": RDF, "rdfs": RDFS, "ns": ns}
)

# Execute the query on the RDF graph
r2= g.query(q2)
# TO DO
# Visualize the results
for r in r2:
 print(r)


"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**
"""

# TO DO
# Visualize the results

"""**TASK 7.4:  List the name of the persons who know Rocky**"""
foaf = Namespace("http://xmlns.com/foaf/0.1/")
q4 = prepareQuery(
    """
    SELECT ?name
    WHERE {
        ?person foaf:knows ?rocky.
        ?person foaf:name ?name.
        ?rocky foaf:name "Rocky".
    }
    """,
    initNs={"foaf": foaf}
)
r4 = g.query(q4)
# TO DO
# Visualize the results
for r in r4:
 print(r)


"""**Task 7.5: List the entities who know at least two other entities in the graph**"""
q5 = prepareQuery(
    """
    SELECT ?entity (COUNT(?known) AS ?count)
    WHERE {
        ?entity foaf:knows ?known.
    }
    GROUP BY ?entity
    HAVING (?count >= 2)
    """,
    initNs={"foaf": foaf}
)

r5 = g.query(q5)
# TO DO
# Visualize the results
for r in r5:
    print(r.entity)