# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LXmgP9rGSzThABik6u8tsMFW-_Qu11h_

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib import FOAF
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import RDF, RDFS
ns = Namespace("http://somewhere#")

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

#SPARQL
q1 = prepareQuery('''
  SELECT ?SubClass WHERE {
    ?SubClass rdfs:subClassOf ?LivingThings.
  }
  ''',
  initNs = { "rdfs": RDFS}
)


for r in g.query(q1):
  print(r.SubClass)

#RDFLib
subclasses = set()

def find_subclasses(class_uri):
    for subclass in g.subjects(RDFS.subClassOf, class_uri):
        subclasses.add(subclass)
        find_subclasses(subclass)
find_subclasses(ns.LivingThing)

for subclass in subclasses:
    print(subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

#SPARQL
q2 = prepareQuery('''
  SELECT ?Individual WHERE {
    ?Individual rdf:type/rdfs:subClassOf* ns:Person.
  }
  ''',
  initNs = { "rdf": RDF, "rdfs":RDFS, "ns": ns}
)


for r in g.query(q2):
  print(r.Individual)

#RDFLib
for sub,pred,obj in g.triples((None, RDF.type , ns.Person)):
  print(sub)
for sub,pred,obj in g.triples((None, RDFS.subClassOf , ns.Person)):
  for sub1, pred1, obj1 in g.triples((None, RDF.type, sub)):
    print(sub1)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

#SPARQL
q3 = prepareQuery('''
  SELECT ?Subject ?Property WHERE {
    {
    ?Subject rdf:type ns:Person.
    ?Subject ?Property ?Value
    }
  UNION
  {
    ?Subject rdf:type/rdfs:subClassOf* ns:Animal.
    ?Subject ?Property ?Value
  }
  }
  ''',
  initNs = { "rdf": RDF, "rdfs":RDFS, "ns": ns}
)


for r in g.query(q3):
  print(r.Subject, r.Property)

#RDFLib
for sub,pred,obj in g.triples((None, RDF.type, ns.Person)):
  for sub1,pred1,obj1 in g.triples((sub, None, None)):
    print(sub1,pred1)
for sub2,pred2,obj2 in g.triples((None, RDF.type, ns.Animal)):
  for sub3,pred3,obj3 in g.triples((sub2, None, None)):
    print(sub3,pred3)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

#SPARQL
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
q4 = prepareQuery('''
SELECT ?name
WHERE {
  ?person rdf:type/rdfs:subClassOf* ns:Person.
  ?person foaf:knows ns:RockySmith.
  ?person vcard:FN ?name
}
  ''',
  initNs = { "vcard":VCARD, "ns":ns, "foaf":FOAF, "rdf":RDF, "rdfs":RDFS}
)


for r in g.query(q4):
  print(r.name)

#RDFLib
from rdflib import Namespace, RDF, RDFS
from rdflib.namespace import FOAF
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

persons = []
def find_persons(tclass):
    for s, p, o in g.triples((None, RDF.type, tclass)):
        persons.append(s)
    for s, p, o in g.triples((None, RDFS.subClassOf, tclass)):
        find_persons(s)
find_persons(ns.Person)

knows = []
for pe in persons:
    for s, p, o in g.triples((pe, FOAF.knows, ns.RockySmith)):
        knows.append(pe)
for k in knows:
    for s, p, o in g.triples((k, VCARD.FN, None)):
      knows[knows.index(k)] = o

for k in knows:
  print(k)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

#SPARQL
q5 = prepareQuery('''
  SELECT ?Entity WHERE {
    ?Entity foaf:knows ?person.
  }
  GROUP BY ?Entity
  HAVING (COUNT(?person)>1)
  ''',
  initNs = { "vcard":VCARD, "ns":ns, "foaf":FOAF}
)


for r in g.query(q5):
  print(r.Entity)

#RDFLib
from collections import defaultdict

knows_count = defaultdict(int)
for s, p, o in g.triples((None, FOAF.knows, None)):
    knows_count[s] += 1
for entity, count in knows_count.items():
    if count >= 2:
        print(entity)

