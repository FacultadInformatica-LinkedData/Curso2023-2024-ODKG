# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cHtrFiHlkirwPK-4VTmpXhDMTKXl1IbP

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")

for s, p, o in g.triples((None,RDFS.subClassOf,ns.LivingThing)):
  print(s)

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns":ns}
)
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
ns = Namespace("http://somewhere#")

for s, p, o in g.triples((None,RDF.type,ns.Person)):
  print(s)

for s, p, o in g.triples((None,RDFS.subClassOf,ns.Person)):
  for s1, p1, o1 in g.triples((None,RDF.type,s)):
    print(s1)

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    {
    ?Subject rdf:type ns:Person.
    }UNION{
    ?Subject rdf:type ?person.
    ?person rdfs:subClassOf ns:Person.
  }}
  ''',
  initNs = { "rdfs": RDFS, "ns":ns}
)
for r in g.query(q1):
  print(r.Subject)
# Visualize the results

for s, p, o in g:
  print(s,p,o)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
ns = Namespace("http://somewhere#")

for s, p, o in g.triples((None,RDF.type,ns.Person)):
  #print(s,p,o)
  for s1,p1,o1 in g.triples((s,None,None)):
    print(s1,p1,o1)
for s, p, o in g.triples((None,RDF.type,ns.Animal)):
  for s1,p1,o1 in g.triples((s,None,None)):
    print(s1,p1,o1)

q1 = prepareQuery('''
  SELECT ?Subject ?Property ?Object WHERE {
    ?Subject rdf:type ?pers.
    FILTER (?pers IN (ns:Animal, ns:Person))
  ?Subject ?Property ?Object.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns":ns}
)
for r in g.query(q1):
  print(r.Subject,r.Property,r.Object)
# Visualize the results

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
ns = Namespace("http://somewhere#")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")

for s, p, o in g.triples((None,FOAF.knows,ns.RockySmith)):
  print(s)

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject foaf:knows ns:RockySmith.
  }
  ''',
  initNs = { "foaf": FOAF, "ns":ns}
)
for r in g.query(q1):
  print(r.Subject)
# Visualize the results

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
ns = Namespace("http://somewhere#")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")

distinct=[]
for s, p, o in g.triples((None,FOAF.knows,None)):
  for s1, p1, o1 in g.triples((s,FOAF.knows,None)):
    if o1 !=o:
      if s1 not in distinct:
        distinct.append(s1)
      #print(s1)
      break

for i in distinct:
  print(i)

q1 = prepareQuery('''
  SELECT distinct ?Subject WHERE {
    ?Subject foaf:knows ?pers1.
    ?Subject foaf:knows ?pers2.
    FILTER(?pers1 != ?pers2).
  }
  ''',
  initNs = { "foaf": FOAF, "ns":ns}
)
for r in g.query(q1):
  print(r.Subject)
# Visualize the results