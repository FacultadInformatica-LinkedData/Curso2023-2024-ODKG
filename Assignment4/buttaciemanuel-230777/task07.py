# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from queue import Queue
from rdflib import Graph, Namespace, Literal, XSD
from rdflib.namespace import RDF, RDFS, FOAF
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# 1. rdflib
subclasses = Queue()
visited = set()

for s, _, _ in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
    subclasses.put(s)
    visited.add(s)

while not subclasses.empty():
    next = subclasses.get()
    
    for s, _, _ in g.triples((None, RDFS.subClassOf, next)):
        subclasses.put(s)

    visited.add(next)

for subclass in visited:
    print(subclass)

# 2. sparql
q1 = prepareQuery('''
    SELECT ?Class WHERE {
        ?Class rdfs:subClassOf* ns:LivingThing .
        FILTER(?Class!=ns:LivingThing)
    }''',
    initNs = { 'ns': ns, 'rdfs': RDFS }
)
# Visualize the results
for r in g.query(q1):
    print(r.Class)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# 1. rdflib
subclasses = Queue()
visited = set()

subclasses.put(ns.Person)

while not subclasses.empty():
    next = subclasses.get()
    
    for s, _, _ in g.triples((None, RDFS.subClassOf, next)):
        subclasses.put(s)

    visited.add(next)

for subclass in visited:
    for s, _, _ in g.triples((None, RDF.type, subclass)):
        print(s, subclass) 
# 2. sparql
q1 = prepareQuery('''
    SELECT ?Person ?Class WHERE {
        ?Person rdf:type ?Class.
        ?Class rdfs:subClassOf* ns:Person.
    }''',
    initNs = { 'ns': ns, 'vcard': vcard }
)
# Visualize the results
for r in g.query(q1):
    print(r.Person, r.Class)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""
# 1. rdflib
for klass in [ ns.Person, ns.Animal ]:
    for s, _, _ in g.triples((None, RDF.type, klass)):
        for _, p, v in g.triples((s, None, None)):
            print(s, klass, p, v)
# 2. sparql
q1 = prepareQuery('''
    SELECT ?X ?Class ?Property ?Value WHERE {
        ?X rdf:type ?Class.
        ?X ?Property ?Value. 
        { ?X rdf:type ns:Person. } UNION { ?X rdf:type ns:Animal. }
    }''',
    initNs = { 'ns': ns, 'vcard': vcard }
)
# Visualize the results
for r in g.query(q1):
    print(r.X, r.Class, r.Property, r.Value)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

for rocky, _, _ in g.triples((None, vcard.Given, Literal('Rocky', datatype = XSD.string))):
    for person, _, _ in g.triples((None, FOAF.knows, rocky)):
        print(person)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

subclasses = Queue()
entity_classes = set()

subclasses.put(ns.LivingThing)

while not subclasses.empty():
    next = subclasses.get()
    
    for s, _, _ in g.triples((None, RDFS.subClassOf, next)):
        subclasses.put(s)

    entity_classes.add(next)

for subclass in entity_classes:
    for entity, _, _ in g.triples((None, RDF.type, subclass)):
        count = 0
        
        for _, _, x in g.triples((entity, FOAF.knows, None)):
            count += 1
        
        if count > 1:
            print(entity, 'knows', count, 'other entities')