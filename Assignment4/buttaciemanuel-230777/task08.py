# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18P0xTS31q1P7nR4efg0Yy3QrClOxqMAe

**Task 08: Completing missing data**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4/"

from rdflib import Graph, Namespace, Literal, URIRef
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
datans = Namespace('http://data.org#')

g1 = Graph()
g2 = Graph()

g1.parse(github_storage+"resources/data01.rdf", format="xml")
g2.parse(github_storage+"resources/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

#Â display original graph
for s, p, o in g1:
    print(s, p, o)

query = prepareQuery('''
    SELECT ?Person ?Class WHERE {
        ?Person a ?Class.
        ?Class rdfs:subclassOf* datans:Person.
    }''',
    initNs = { 'datans': datans, 'vcard': vcard }
)

# list all people in original graph
people = [ r.Person for r in g1.query(query) ]

# for each person add properties
for person in people:
    subquery = prepareQuery('''
        SELECT ?Property ?Value WHERE {
            ?Person a datans:Person .
            ?Person ?Property ?Value .
            FILTER(?Property!=<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>)
        }''',
        initNs = { 'datans': datans, 'vcard': vcard }
    )
    # add all properties, duplicate will be automatically discarded
    for r in g2.query(subquery, initBindings = { 'Person': person }):
        g1.add((person, r.Property, r.Value))

# display augmented graph
for s, p, o in g1:
    print(s, p, o)