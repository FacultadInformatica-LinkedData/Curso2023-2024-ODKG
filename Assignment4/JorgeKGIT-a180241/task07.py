# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hsgq4fcUsnXaIajJ8IR3Zi_TItPRpDH9

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

#Funcion auxiliar para las operaciones recursivas:
def get_subclasses(clase,n_iter):
  if  n_iter!=0:
    for s, p, o in g.triples((None,RDFS.subClassOf,clase)):
      print(s)
      get_subclasses(s,n_iter)
  else:
    print(clase)
    n_iter+=1
    get_subclasses(clase,n_iter)

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
vcard=Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns=Namespace("http://somewhere#")
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject RDFS:subClassOf* ns:LivingThing.
  }
  ''',
  initNs = { "RDFS": RDFS, "vcard": vcard,"ns":ns}
                  #Para añadir los prefijos a la query
)
print("Usando rdflib:")
n_iter=0
get_subclasses(ns.LivingThing,n_iter)

print("Usando Sparql:")
# Visualize the results

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

q2 = prepareQuery('''
  SELECT distinct ?Subject  WHERE {
    {?Subject a ns:Person.}
  UNION
  {
    ?subPerson RDFS:subClassOf* ns:Person.
    ?Subject a ?subPerson.
}
}
  ''',
  initNs = { "RDFS": RDFS, "vcard": vcard,"ns":ns}
                  #Para añadir los prefijos a la query
)
print("Usando rdflib:")
subclases=[]
n_iter=0
#Añade las subclases de una clase a una lista
def recorrer_subclases(clase,subclases,n_iter):
  if n_iter==0:
    subclases.append(ns.Person)
    n_iter=1
    recorrer_subclases(clase,subclases,n_iter)
  else:
    for s,p,o in g.triples((None,RDFS.subClassOf,clase)):
      subclases.append(s)
      recorrer_subclases(s,subclases,n_iter)

recorrer_subclases(ns.Person,subclases,n_iter)
#Se imprimen los individuos de las listas
for object in subclases:
    for s,p,o in g.triples((None, RDF.type, object)):
      print(s)
#print("Subclases: ",subclases)
#for s, p, o in g.triples((None,RDF.type,ns.Person)):
#  print(s)
#for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
# for s, p, o in g.triples((None,RDF.type,s1)):
 #   print(s)
# Visualize the results
print("Usando sparql")
for r in g.query(q2):
  print(r.Subject)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
#With query:
q3 = prepareQuery('''
  SELECT distinct ?Subject ?p  WHERE {
    {?Subject a ns:Person;
    ?p ?z. }
  UNION
  {
    ?Subject a ns:Animal;
    ?p ?z.
}
}
  ''',
  initNs = { "RDFS": RDFS, "vcard": vcard,"ns":ns}
                  #Para añadir los prefijos a la query
)

#Con RDFlib
print("Usando RDFlib:")
for s, p, o in g.triples((None,RDF.type,ns.Person)):
  aux=None
  for s1,p1,o1 in g.triples ((s,None,None)):
    if p1!=aux:
      print(s1,p1)
    aux=p1
for s,p,o in g.triples((None, RDF.type,ns.Animal)):
  aux=None
  for s1,p1,o1 in g.triples ((s,None,None)):
    if p1!=aux:
      print(s1,p1)
    aux=p1
# Visualize the results
print("Usando Sparql:")
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
FOAF = Namespace("http://xmlns.com/foaf/0.1/")
xsd = Namespace("http://www.w3.org/2001/XMLSchema#")
vcard=Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q4 = prepareQuery('''
  SELECT distinct ?Subject WHERE {
    {
    ?Subject a ns:Person;
    foaf:knows ?r.
    ?r vcard:Given "Rocky"^^xsd:string .
   }UNION
   {
    ?SP RDFS:subClassOf ns:Person.
    ?Subject a ?SP;
    foaf:knows ?r.
    ?r vcard:Given "Rocky"^^xsd:string .
   }

}
  ''',
  initNs = { "RDFS": RDFS, "vcard": vcard,"ns":ns, "foaf":FOAF,"xsd":xsd}
                  #Para añadir los prefijos a la query
)
print("Usando RDFlib:")
#Con RDFlib
for s, p, o in g.triples((None,RDF.type,ns.Person)):
  for s1,p1,o1 in g.triples((s,FOAF.knows,None)):
    for s2,p2,o2 in g.triples((o1,vcard.Given,Literal("Rocky", datatype=xsd.string))):
      print(s)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1,p1,o1 in g.triples((None,RDF.type,s)):
    for s2,p2,o2 in g.triples((s1,FOAF.knows,None)):
      for s3,p3,o3 in g.triples((o2,vcard.Given,Literal("Rocky", datatype=xsd.string))):
        print(s1)


# Visualize the results
print("Usando Sparql:")
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
#Con queries de SPARQL
q5 = prepareQuery('''
  SELECT distinct ?Subject WHERE {

  ?Subject foaf:knows ?other1 .
  ?Subject foaf:knows ?other2 .
  FILTER (?other1 != ?other2).
}
  ''',
  initNs = { "RDFS": RDFS, "vcard": vcard,"ns":ns, "foaf":FOAF,"xsd":xsd}
                  #Para añadir los prefijos a la query
)
#Con solo RDFlib
print("Usando RDFlib:")
aux=[]
for s,p,o in g.triples((None,FOAF.knows,None)):
  for s1,p1,o1 in g.triples ((s,FOAF.knows,None)):
    if(o1!=o):
      if(not( s  in aux)):
        aux.append(s)
print(aux)
# Visualize the results
print("Usando Sparql:")
for r in g.query(q5):
  print(r)

