# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18P0xTS31q1P7nR4efg0Yy3QrClOxqMAe

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"resources/data01.rdf", format="xml")
g2.parse(github_storage+"resources/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://data.org#")

# Get all instances of Person in g1
query_person = prepareQuery('''
  SELECT ?person WHERE {
    ?person a ns:Person
  }
  ''',
  initNs={"ns": ns}
)

# Visualize the graph before additions
for result in (g1.query(query_person)):
    for subject, predicate, object_ in g1.triples((result.person, None, None)):
        print(subject, predicate, object_)

# For each Person in g1, query g2 for additional fields and add them to g1
additional_fields = []

for result in g1.query(query_person):
    person = result.person

    fields = [(subject, predicate, object_) for subject, predicate, object_ in g2.triples((person, None, None))]
    for field in fields:
        additional_fields.append(field)

print("---")

for i in range(0, len(additional_fields)):
    g1.add((additional_fields[i][0], additional_fields[i][1], additional_fields[i][2]))
    print("ADDED: (", additional_fields[i][0], additional_fields[i][1], additional_fields[i][2], ")")

# Visualize the results
print("---")

for result in (g1.query(query_person)):
    for subject, predicate, object_ in g1.triples((result.person, None, None)):
        print(subject, predicate, object_)
