# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
#RDFLib
subclasses_rdflib = []
def find_subclasses(target_class):
    for s, p, o in g.triples((None, RDFS.subClassOf, target_class)):
        subclasses_rdflib.append(s)
        find_subclasses(s)
find_subclasses(ns.LivingThing)
#SPARQL
q1 = prepareQuery('''
    SELECT ?s
    WHERE { 
        ?s rdfs:subClassOf/rdfs:subClassOf* ns:LivingThing.
    }
    ''',
    initNs = { "rdfs": RDFS, "ns": ns}
    )
# Visualize the results
print("rdflib results:")
for s in subclasses_rdflib:
  print(s)
print("SPARQL results:")
for r in g.query(q1):
  print(r.s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
#RDFLib
individuals_rdflib = []
def find_individuals(target_class):
    for s, p, o in g.triples((None, RDF.type, target_class)):
        individuals_rdflib.append(s)
    for s, p, o in g.triples((None, RDFS.subClassOf, target_class)):
        find_individuals(s)
find_individuals(ns.Person)
#SPARQL
q1 = prepareQuery('''
    SELECT ?i
    WHERE {
        ?i rdf:type/rdfs:subClassOf* ns:Person.
    }
    ''',
    initNs = { "rdfs": RDFS, "ns": ns}
    )
# Visualize the results
print("rdflib results:")
for i in individuals_rdflib:
  print(i)
print("SPARQL results:")
for r in g.query(q1):
    print(r.i)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties
including their class with RDFLib and SPARQL. 
You do not need to list the individuals of the subclasses of person**

"""

# TO DO
#RDFLib
props = []
def find_props(target_class):
    for s, p, o in g.triples((None, RDF.type, target_class)):
        p = [p for s,p,o in g.triples((s, None, None))]
        props.append((s,target_class, p))
    if target_class != ns.Person:
      for s, p, o in g.triples((None, RDFS.subClassOf, target_class)):
          find_props(s)
find_props(ns.Person)
find_props(ns.Animal)
q1 = prepareQuery('''
    SELECT ?i ?p ?Class
    WHERE {
      {
        ?i rdf:type ns:Person.
        ?i ?p ?o.
      }
        UNION
        {
        ?i rdf:type ?Class.
        ?Class rdfs:subClassOf* ns:Animal.
        ?i ?p ?o.
        }
    }
    ''',
    initNs = { "rdfs": RDFS, "ns": ns}
    )
# Visualize the results
print("rdflib results:")
for i in props:
  print(i)
print("SPARQL results:")
for r in g.query(q1):
  if r.Class == None:
    r.Class = ns.Person
  print(r.i, r.Class, r.p)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
#RDFLib
from rdflib.namespace import FOAF
persons = []
def find_persons(target_class):
    for s, p, o in g.triples((None, RDF.type, target_class)):
        persons.append(s)
    for s, p, o in g.triples((None, RDFS.subClassOf, target_class)):
        find_persons(s)
find_persons(ns.Person)
knows = []
for pe in persons:
  for s, p, o in g.triples((pe, FOAF.knows, ns.RockySmith)):
    knows.append(pe)
for k in knows:
  for s, p, o in g.triples((k, VCARD.FN, None)):
      knows[knows.index(k)] = o
#SPARQL
q1 = prepareQuery('''
    SELECT ?v
    WHERE {
        ?p rdf:type/rdfs:subClassOf* ns:Person.
        ?p foaf:knows ns:RockySmith.
        ?p vcard:FN ?v
    }
    ''',
    initNs = { "rdfs": RDFS, "ns": ns, "foaf": FOAF, "vcard": VCARD, "rdf":RDF}
    )
# Visualize the results
print("rdflib results:")
for k in knows:
  print(k)
print("SPARQL results:")
for r in g.query(q1):
  print(r.v)
"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
#RDFLib
from rdflib.namespace import FOAF
knows = {}
for s, p, o in g.triples((None, FOAF.knows, None)):
  if s not in knows:
    knows[s] = set()
  knows[s].add(o)
entity=[]
for en, kn in knows.items():
  if len(kn)>= 2:
    entity.append(en)
#SPARQL
q1 = prepareQuery('''
  SELECT ?entity
    WHERE {
        ?entity foaf:knows ?o.
    }
    GROUP BY ?entity
    HAVING(COUNT(?o)>1)
    ''',
    initNs = { "foaf": FOAF}
    )
# Visualize the results
print("rdflib results:")
for en in entity:
  print(en)
print("SPARQL results:")
for r in g.query(q1):
  print(r.entity)