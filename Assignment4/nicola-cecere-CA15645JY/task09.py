# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aA_7cDJnS46kKnLS5uuCGN5_s3QANqk-

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"resources/data03.rdf", format="xml")
g2.parse(github_storage+"resources/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""


from rdflib import XSD
from rdflib.namespace import RDF, RDFS, OWL
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://data.three.org#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

# Find identities in the 2 graphs:
# 1. Get all instances of Person in Graph 1
query_person_g1 = prepareQuery('''
                  SELECT ?person WHERE{
                    ?person a ns:Person
                  }
                  ''', initNs={"ns" : ns}
                  )

# 2. For each Person in Graph 1, check Given and Family Name
names_list = []
for result in g1.query(query_person_g1):
    given_name = g1.value(result.person, VCARD.Given, None)
    family_name = g1.value(result.person, VCARD.FN, None)
    names_list.append((result.person, given_name, family_name))

# 3. For each Person in Graph 1, check if anyone in Graph 2 has the same Given and FN
query_person_g2 = prepareQuery('''
                  SELECT ?person WHERE{
                    ?person VCARD:Given ?Given .
                    ?person VCARD:FN ?FN
                  }
                  ''', initNs={"ns" : ns, "VCARD" : VCARD}
                  )

for identity in names_list:
    for result in g2.query(query_person_g2, initBindings={'?Given': Literal(identity[1], datatype=XSD.string), '?FN': Literal(identity[2], datatype=XSD.string)}):
        # Create triples connecting the identities and insert in g3
        g3.add((identity[0], OWL.sameAs, result.person))

# Visualize the result
print("GRAPH 3:\n")
for subject, predicate, object_ in g3:
    print(subject, predicate, object_)
