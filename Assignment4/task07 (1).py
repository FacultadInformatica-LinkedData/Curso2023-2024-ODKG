# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gfP_WWCahjte9AZDIV8H4NeBufHJQwTD

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

print("RDFLib: ")

for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
      if (o, RDFS.subClassOf, ns.LivingThing) in g:
        print(o)
print(s,p,o)

def recursive_subclasses(subclass):
    print(subclass)
    for subclass, _, _ in g.triples((None, RDFS.subClassOf, subclass)):
        recursive_subclasses(subclass)

recursive_subclasses(ns.LivingThing)

print("\nSPARQL: ")

from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery(
        """
            SELECT ?subClass
            WHERE{
                ?subClass rdfs:subClassOf* ns:LivingThing .
            }
        """,
        initNs = {"rdfs":RDFS, "ns":ns})
for r in g.query(q1):
  print(r)


print("\nSPARQL query for subclasses of LivingThing:")
for r in g.query(q1):
    print(r.subClass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
print("RDFLib: ")

def print_subclass_individuals(Class):
    for individual, _, _ in g.triples((None, RDF.type, Class)):
        print(individual)

    for subclass, _, _ in g.triples((None, RDFS.subClassOf, Class)):
        print_subclass_individuals(subclass)
print_subclass_individuals(ns.Person)

print("\nSPARQL: ")

from rdflib.plugins.sparql import prepareQuery

q2 = prepareQuery(
        """
            SELECT ?s
            WHERE{
              ?s a/rdfs:subClassOf* ns:Person

            }
        """,
        initNs = {"rdfs":RDFS, "ns":ns})

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
print("RDFLib for Person: ")

for s, p, o in g.triples((None, RDF.type, ns.Person)):
  for s0, p0, o0 in g.triples((s, None, None)):
      print(s0, p0, o0)


print("RDFLib for Animal: ")

for s, p, o in g.triples((None, RDF.type, ns.Animal)):
  for s1, p1, o1 in g.triples((s, None, None)):
      print(s1, p1, o1)

print("\nSPARQL")

from rdflib.plugins.sparql import prepareQuery

q3 = prepareQuery('''
    SELECT ?s ?p ?o
    WHERE {
    {
    ?s rdf:type ns:Person.
    }
    UNION
    {
    ?s rdf:type ns:Animal.
    }
    ?s ?p ?o
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": ns}
)
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO

FOAF = Namespace("http://xmlns.com/foaf/0.1/")
xsd = Namespace("http://www.w3.org/2001/XMLSchema#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
from rdflib.plugins.sparql import prepareQuery

print("RDFLib: ")
for s, p, o in g.triples((None,RDF.type,ns.Person)):
  for s1, p1, o1 in g.triples((s,FOAF.knows,None)):
    for s2, p2, o2 in g.triples((o1,vcard.Given,Literal("Rocky", datatype=xsd.string))):
      print(s)

print("SPARQL: ")

q5 = prepareQuery(
    """
    SELECT ?s
    WHERE {
        ?s foaf:knows ns:RockySmith .
        ?s vcard:FN ?value
    }
    """,
    initNs={"foaf": FOAF, "ns": ns, "vcard": vcard}
)

for r in g.query(q5):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery


print("RDFLib: ")
v=[]
for s, p, o in g.triples((None, FOAF.knows, None)):
  for s1, p1, o1 in g.triples((s,FOAF.knows,None)):
    if(o1!=o):
      if(not(s in v)):
       v.append(s)
print(s)

print("SPARQL: ")

q6 = prepareQuery(
    """
    SELECT distinct ?s
    WHERE {
      ?s foaf:knows ?person1 .
      ?s foaf:knows ?person2 .
      FILTER(?person1 != ?person2)
    }
    """,
    initNs={"foaf": FOAF, "ns": ns}
)

for r in g.query(q6):
  print(r)